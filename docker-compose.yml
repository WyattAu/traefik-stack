networks:
  proxy:
    external: true # This network must be created manually first
  authentik-internal:
    internal: true
  seafile-internal:
    internal: true

services:
  # ----------------------------------------------------------------
  # 1. Traefik (Reverse Proxy)
  # ----------------------------------------------------------------
  traefik:
    image: traefik:v3.4
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.email=${CLOUDFLARE_EMAIL}"
      - "--certificatesresolvers.cloudflare.acme.storage=/etc/traefik/acme.json"
      - "--providers.file.filename=/etc/traefik/rules.yml"
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${APP_DATA_PATH}/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ${APP_DATA_PATH}/traefik/rules.yml:/etc/traefik/rules.yml:ro
      - ${APP_DATA_PATH}/traefik/acme.json:/etc/traefik/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-dashboard.middlewares=security-headers@file"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"

  # ----------------------------------------------------------------
  # 2. Cloudflare DDNS (Dynamic DNS Updater)
  # ----------------------------------------------------------------
  cloudflare-ddns:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    restart: unless-stopped
    environment:
      - API_KEY=${CLOUDFLARE_DNS_API_TOKEN}
      - ZONE=${DOMAIN}
      - SUBDOMAIN=@,gitea,seafile,auth,traefik # Use @ for the root domain, or specify a subdomain, separate by comma without space
      - PROXIED=true # Set to true to proxy through Cloudflare
      - TZ=${TZ}

  # ----------------------------------------------------------------
  # 3. Gitea (Git Service)
  # ----------------------------------------------------------------
  gitea:
    image: gitea/gitea:1.24
    container_name: gitea
    restart: unless-stopped
    environment:
      - USER_UID=${PUID}
      - USER_GID=${PGID}
      - GITEA__database__DB_TYPE=sqlite3 # Using sqlite for simplicity
      - GITEA__database__PATH=/data/gitea/gitea.db
      - GITEA__server__ROOT_URL=https://gitea.${DOMAIN}
      - TZ=${TZ}
    networks:
      - proxy
    volumes:
      - ${APP_DATA_PATH}/gitea/data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitea.rule=Host(`gitea.${DOMAIN}`)"
      - "traefik.http.routers.gitea.tls.certresolver=cloudflare"
      - "traefik.http.services.gitea.loadbalancer.server.port=3000"
      - "traefik.http.routers.gitea.middlewares=security-headers@file"

  # ----------------------------------------------------------------
  # 4. Seafile (File Hosting)
  # ----------------------------------------------------------------
  seafile-db:
    image: mariadb:10.11
    container_name: seafile-db
    restart: unless-stopped
    networks:
      - seafile-internal
    volumes:
      - ${APP_DATA_PATH}/seafile/db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${SEAFILE_DB_PASSWORD}
      - MYSQL_LOG_CONSOLE=true
      - TZ=${TZ}

  seafile-memcached:
    image: memcached:1.6
    container_name: seafile-memcached
    restart: unless-stopped
    networks:
      - seafile-internal
    entrypoint: memcached -m 256

  seafile:
    image: seafileltd/seafile-mc:13.0.8
    container_name: seafile
    restart: unless-stopped
    networks:
      - proxy
      - seafile-internal
    ports: # Only for the first-time setup script
      - "8082:8082"
    volumes:
      - ${APP_DATA_PATH}/seafile/data:/shared
    environment:
      - DB_HOST=seafile-db
      - DB_ROOT_PASSWD=${SEAFILE_DB_PASSWORD}
      - TIME_ZONE=${TZ}
      - SEAFILE_ADMIN_EMAIL=${SEAFILE_ADMIN_EMAIL}
      - SEAFILE_ADMIN_PASSWORD=${SEAFILE_ADMIN_PASSWORD}
      - SEAFILE_SERVER_LETSENCRYPT=false # Traefik handles SSL
      - SEAFILE_SERVER_HOSTNAME=seafile.${DOMAIN}
    depends_on:
      - seafile-db
      - seafile-memcached
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.seafile.rule=Host(`seafile.${DOMAIN}`)"
      - "traefik.http.routers.seafile.tls.certresolver=cloudflare"
      - "traefik.http.services.seafile.loadbalancer.server.port=80"
      - "traefik.http.routers.seafile.middlewares=security-headers@file"

  # ----------------------------------------------------------------
  # 5. Authentik (Authentication Provider)
  # ----------------------------------------------------------------
  authentik-db:
    image: postgres:17-alpine
    container_name: authentik-db
    restart: unless-stopped
    networks:
      - authentik-internal
    volumes:
      - ${APP_DATA_PATH}/authentik/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${AUTHENTIK_PG_USER}
      - POSTGRES_PASSWORD=${AUTHENTIK_PG_PASS}
      - POSTGRES_DB=authentik
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 5

  authentik-redis:
    image: redis:8-alpine
    container_name: authentik-redis
    restart: unless-stopped
    networks:
      - authentik-internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 5

  authentik-server:
    image: ghcr.io/goauthentik/server:2025.6
    container_name: authentik-server
    restart: unless-stopped
    networks:
      - proxy
      - authentik-internal
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PASS}
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_LISTEN__HTTP: 0.0.0.0:9000
      AUTHENTIK_LISTEN__HTTPS: 0.0.0.0:9443
      AUTHENTIK_ERROR_REPORTING__ENABLED: "true"
      TZ: ${TZ}
    volumes:
      - ${APP_DATA_PATH}/authentik/geoip:/geoip
      - ${APP_DATA_PATH}/authentik/templates:/templates
    depends_on:
      authentik-db:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.authentik.tls.certresolver=cloudflare"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      - "traefik.http.routers.authentik.middlewares=security-headers@file"

  authentik-worker:
    image: ghcr.io/goauthentik/server:2025.6
    container_name: authentik-worker
    restart: unless-stopped
    networks:
      - authentik-internal
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PASS}
      AUTHENTIK_REDIS__HOST: authentik-redis
      TZ: ${TZ}
    volumes:
      - ${APP_DATA_PATH}/authentik/geoip:/geoip
      - ${APP_DATA_PATH}/authentik/templates:/templates
    depends_on:
      authentik-db:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy