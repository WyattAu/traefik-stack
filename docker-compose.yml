networks:
  proxy:
    external: true # This network must be created manually first
  authentik-internal:
    internal: true
  seafile-internal:
    internal: true

services:
  # ----------------------------------------------------------------
  # 1. Traefik (Reverse Proxy)
  # ----------------------------------------------------------------
  traefik:
    image: traefik:v3.4
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.email=${CLOUDFLARE_EMAIL}"
      - "--certificatesresolvers.cloudflare.acme.storage=/etc/traefik/acme.json"
      - "--providers.file.filename=/etc/traefik/rules.yml"
      - "--entryPoints.websecure.transport.respondingTimeouts.readTimeout=36000"
      - "--entryPoints.websecure.transport.respondingTimeouts.idleTimeout=36000"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--accesslog.filepath=/logs/access.log"
      - "--accesslog.bufferingsize=100"
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${APP_DATA_PATH}/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ${APP_DATA_PATH}/traefik/rules.yml:/etc/traefik/rules.yml:ro
      - ${APP_DATA_PATH}/traefik/acme.json:/etc/traefik/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-dashboard.middlewares=security-headers@file"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"

  # ----------------------------------------------------------------
  # 2. Cloudflare DDNS (Dynamic DNS Updater)
  # ----------------------------------------------------------------

  cloudflare-ddns-root:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns-root
    restart: unless-stopped
    environment:
      - API_KEY=${CLOUDFLARE_DNS_API_TOKEN}
      - ZONE=${DOMAIN}
      - SUBDOMAIN=@
      - PROXIED=true
      - TZ=${TZ}

  cloudflare-ddns-gitea:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns-gitea
    restart: unless-stopped
    environment:
      - API_KEY=${CLOUDFLARE_DNS_API_TOKEN}
      - ZONE=${DOMAIN}
      - SUBDOMAIN=gitea
      - PROXIED=true
      - TZ=${TZ}
  
  cloudflare-ddns-seafile:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns-seafile
    restart: unless-stopped
    environment:
      - API_KEY=${CLOUDFLARE_DNS_API_TOKEN}
      - ZONE=${DOMAIN}
      - SUBDOMAIN=seafile
      - PROXIED=true
      - TZ=${TZ}
  cloudflare-ddns-oods:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns-oods
    restart: unless-stopped
    environment:
      - API_KEY=${CLOUDFLARE_DNS_API_TOKEN}
      - ZONE=${DOMAIN}
      - SUBDOMAIN=oods.seafile
      - PROXIED=true
      - TZ=${TZ}
  cloudflare-ddns-auth:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns-auth
    restart: unless-stopped
    environment:
      - API_KEY=${CLOUDFLARE_DNS_API_TOKEN}
      - ZONE=${DOMAIN}
      - SUBDOMAIN=auth
      - PROXIED=true
      - TZ=${TZ}
  
  cloudflare-ddns-traefik:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns-traefik
    restart: unless-stopped
    environment:
      - API_KEY=${CLOUDFLARE_DNS_API_TOKEN}
      - ZONE=${DOMAIN}
      - SUBDOMAIN=traefik
      - PROXIED=true
      - TZ=${TZ}

  # ----------------------------------------------------------------
  # 3. Gitea (Git Service)
  # ----------------------------------------------------------------
  gitea:
    image: gitea/gitea:1.24
    container_name: gitea
    restart: unless-stopped
    environment:
      - USER_UID=${PUID}
      - USER_GID=${PGID}
      - GITEA__database__DB_TYPE=sqlite3 # Using sqlite for simplicity
      - GITEA__database__PATH=/data/gitea/gitea.db
      - GITEA__server__ROOT_URL=https://gitea.${DOMAIN}
      - TZ=${TZ}
    networks:
      - proxy
    volumes:
      - ${APP_DATA_PATH}/gitea/data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitea.rule=Host(`gitea.${DOMAIN}`)"
      - "traefik.http.routers.gitea.tls.certresolver=cloudflare"
      - "traefik.http.services.gitea.loadbalancer.server.port=3000"
      - "traefik.http.routers.gitea.middlewares=security-headers@file"

  # ----------------------------------------------------------------
  # 4. Seafile (File Hosting)
  # ----------------------------------------------------------------
  seafile-db:
    image: mariadb:10.11
    container_name: seafile-db
    restart: unless-stopped
    networks:
      - seafile-internal
    volumes:
      - ${APP_DATA_PATH}/seafile/db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${SEAFILE_DB_PASSWORD}
      - MYSQL_LOG_CONSOLE=true
      - TZ=${TZ}
    healthcheck:
      test: [
        "CMD", "mysqladmin", "ping", "-h", "localhost",
        "--user=root", "--password=${SEAFILE_DB_PASSWORD}"
      ]
      timeout: 5s
      interval: 10s
      retries: 5

  seafile-memcached:
    image: memcached:1.6-alpine
    container_name: seafile-memcached
    restart: unless-stopped
    networks:
      - seafile-internal
    entrypoint: memcached -m 256
    healthcheck:
      # This command uses the shell to send the "stats" command to memcached via netcat (nc)
      # and then uses grep to check for a valid response ("STAT pid").
      # This confirms the service is not just running, but also responsive.
      test: ["CMD-SHELL", "echo 'stats' | nc 127.0.0.1 11211 | grep 'STAT pid'"]
      interval: 10s
      timeout: 5s
      retries: 5

  seafile:
    image: seafileltd/seafile-mc:13.0.8
    container_name: seafile
    restart: unless-stopped
    user: "${PUID}:${PGID}"
    networks: [proxy,seafile-internal]
    #ports: # Only for initial setup
    #  - "8000:8000"
    volumes:
      - ${APP_DATA_PATH}/seafile/data:/shared
    environment:
    - DB_HOST=seafile-db
    - DB_ROOT_PASSWD=${SEAFILE_DB_PASSWORD}
    - TIME_ZONE=${TZ}
    - SEAFILE_ADMIN_EMAIL=${SEAFILE_ADMIN_EMAIL}
    - SEAFILE_ADMIN_PASSWORD=${SEAFILE_ADMIN_PASSWORD}
    - SEAFILE_SERVER_LETSENCRYPT=false
    - SEAFILE_SERVER_HOSTNAME=seafile.${DOMAIN}
    - SEAFILE_SERVICE_URL=https://seafile.${DOMAIN}
    - SEAFILE_FILE_SERVER_ROOT=https://seafile.${DOMAIN}/seafhttp
    - SEAFILE_ONLYOFFICE_ENABLED=true
    - SEAFILE_ONLYOFFICE_HOST=https://oods.seafile.${DOMAIN}
    - SEAFILE_ONLYOFFICE_JWT_SECRET=${ONLYOFFICE_JWT_SECRET}

    depends_on:
      seafile-db:
        condition: service_healthy
      seafile-memcached:
        condition: service_healthy
    labels:
    # -------------------------------------------------------------
    #   TRAEFIK â€“ root router (web UI)
    # -------------------------------------------------------------
    - "traefik.enable=true"
    - "traefik.docker.network=proxy"

    - "traefik.http.routers.seafile.rule=Host(`seafile.${DOMAIN}`)"
    - "traefik.http.routers.seafile.tls.certresolver=cloudflare"
    - "traefik.http.routers.seafile.entrypoints=websecure"
    - "traefik.http.routers.seafile.service=seafile"
    # -------------------------------------------------------------
    #   TRAEFIK -- seafdav router
    # -------------------------------------------------------------
    - "traefik.http.routers.seafile-dav.rule=Host(`seafile.${DOMAIN}`) && PathPrefix(`/seafdav`)"
    - "traefik.http.routers.seafile-dav.entrypoints=websecure"
    - "traefik.http.routers.seafile-dav.tls.certresolver=cloudflare" # Added for consistency
    - "traefik.http.routers.seafile-dav.service=seafile-dav"
    - "traefik.http.services.seafile-dav.loadbalancer.server.port=8080"
    # -------------------------------------------------------------
    #   TRAEFIK -- seafhttp router
    # -------------------------------------------------------------
    - "traefik.http.routers.seafile-http.rule=Host(`seafile.${DOMAIN}`) && PathPrefix(`/seafhttp`)"
    - "traefik.http.routers.seafile-http.entrypoints=websecure"
    - "traefik.http.routers.seafile-http.tls.certresolver=cloudflare" # Added for consistency
    - "traefik.http.routers.seafile-http.service=seafile-http"
    - "traefik.http.middlewares.seafile-strip.stripprefix.prefixes=/seafhttp"
    - "traefik.http.routers.seafile-http.middlewares=seafile-strip"
    - "traefik.http.services.seafile-http.loadbalancer.server.port=8082"

    # -------------------------------------------------------------
    #   TRAEFIK -- service port definitions
    # -------------------------------------------------------------
    - "traefik.http.services.seafile.loadbalancer.server.port=8000"

  onlyoffice-documentserver:
    image: onlyoffice/documentserver:latest
    container_name: onlyoffice-documentserver
    restart: unless-stopped
    networks: [proxy, seafile-internal]
    environment:
      - JWT_ENABLED=true
      - JWT_SECRET=${ONLYOFFICE_JWT_SECRET}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.onlyoffice.rule=Host(`oods.seafile.${DOMAIN}`)"
      - "traefik.http.routers.onlyoffice.entrypoints=websecure"
      - "traefik.http.routers.onlyoffice.tls.certresolver=cloudflare"
      - "traefik.http.routers.onlyoffice.middlewares=security-headers@file,onlyoffice-headers"
      - "traefik.http.services.onlyoffice.loadbalancer.server.port=80"
      - "traefik.http.middlewares.onlyoffice-headers.headers.customrequestheaders.X-Forwarded-Host=oods.seafile.${DOMAIN}"
      - "traefik.http.middlewares.onlyoffice-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
  # ----------------------------------------------------------------
  # 5. Authentik (Authentication Provider)
  # ----------------------------------------------------------------
  authentik-db:
    image: postgres:17-alpine
    container_name: authentik-db
    restart: unless-stopped
    networks:
      - authentik-internal
    volumes:
      - ${APP_DATA_PATH}/authentik/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${AUTHENTIK_PG_USER}
      - POSTGRES_PASSWORD=${AUTHENTIK_PG_PASS}
      - POSTGRES_DB=authentik
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 5

  authentik-redis:
    image: redis:8-alpine
    container_name: authentik-redis
    restart: unless-stopped
    networks:
      - authentik-internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 5

  authentik-server:
    image: ghcr.io/goauthentik/server:2025.6
    container_name: authentik-server
    restart: unless-stopped
    networks:
      - proxy
      - authentik-internal
    environment:
      - AUTHENTIK_INSECURE=true
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_POSTGRESQL__HOST=authentik-db
      - AUTHENTIK_POSTGRESQL__USER=${AUTHENTIK_PG_USER}
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_PG_PASS}
      - AUTHENTIK_REDIS__HOST=authentik-redis
      - AUTHENTIK_LISTEN__HTTP=0.0.0.0:9000
      - AUTHENTIK_LISTEN__HTTPS=0.0.0.0:9443
      - AUTHENTIK_ERROR_REPORTING__ENABLED="true"
      - TZ=${TZ}
    volumes:
      - ${APP_DATA_PATH}/authentik/geoip:/geoip
      - ${APP_DATA_PATH}/authentik/templates:/templates
    depends_on:
      authentik-db:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.authentik.tls.certresolver=cloudflare"
      #- "traefik.http.services.authentik.loadbalancer.server.port=9000"
      - "traefik.http.services.authentik.loadbalancer.server.port=9443"
      - "traefik.http.services.authentik.loadbalancer.server.scheme=https"
      - "traefik.http.routers.authentik.middlewares=security-headers@file"

  authentik-worker:
    image: ghcr.io/goauthentik/server:2025.6
    container_name: authentik-worker
    restart: unless-stopped
    networks:
      - authentik-internal
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_PG_PASS}
      AUTHENTIK_REDIS__HOST: authentik-redis
      TZ: ${TZ}
    volumes:
      - ${APP_DATA_PATH}/authentik/geoip:/geoip
      - ${APP_DATA_PATH}/authentik/templates:/templates
    depends_on:
      authentik-db:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy